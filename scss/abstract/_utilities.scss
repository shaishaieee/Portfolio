@use "./colors" as *;
// note: the variable $key means keyword and $val means value
$colors: (
  "dark": $clr--dark,
  "dark-gray": $clr--dark--gray,
  "light": $clr--light,
  "light-gray": $clr--light--gray,
  "primary": $clr--primary,
);

@each $key, $val in $colors {
  .text {
    &--#{$key} {
      color: $val;
    }
  }
  .bg {
    &--#{$key} {
      background-color: $val;
    }
  }
}

$text-align: (
  "left": left,
  "right": right,
  "center": center,
  "justify": justify,
);

@each $key, $val in $text-align {
  .t-align {
    &--#{$key} {
      text-align: $val;
    }
  }
}

$display: (
  "block": block,
  "inline-block": inline-block,
  "grid": grid,
  "flex": flex,
);

@each $key, $val in $display {
  .d {
    &--#{$key} {
      display: $val;
    }
  }
}

$position: (
  "absolute": absolute,
  "relative": relative,
  "static": static,
  "fixed": fixed,
);

@each $key, $val in position {
  .position {
    &--#{$key} {
      position: $val;
    }
  }
}

@for $i from 0 through 20 {
  .mb--#{$i} {
    margin-bottom: $i + rem;
  }
  .mr--#{$i} {
    margin-right: $i + rem;
  }
  .mt--#{$i} {
    margin-top: $i + rem;
  }
  .p--#{$i} {
    padding: $i + rem;
  }
  .px--#{$i} {
    padding: 0 $i + rem;
  }
  .py--#{$i} {
    padding: $i + rem 0;
  }
  .pt--#{$i} {
    padding-top: $i + rem;
  }
  .pb--#{$i} {
    padding-bottom: $i + rem;
  }
}
